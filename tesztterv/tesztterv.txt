Tesztelési terv 

HotelLite


Dokumentum címe: (azonosítója)			0123456789
Minõsítés: (állapot)
(tervezet, jóváhagyott, stb.)			jóváhagyott
Verziószám:					V1.0
Projekt név:					HotelLite
Készítette(tesztterv):				Sass-Gyarmati Norbert
Telefon:					06301234567
Utolsó mentés kelte:				2019.12.03
Dokumentum célja:				Tesztterv elkészítése
Fájlnév:					tesztterv.txt
 

 
Változtatások jegyzéke
Verzió	Dátum	Készítette	Megjegyzés
0.5	2019.11.26	Sass-Gyarmati Norbert	a projekt osztályain javítottam
0.7	2019.11.30	Sass-Gyarmati Norbert	a projekt adatbázisa át lett szerkesztve
0.9	2019.12.02	Oravecz Zsolt		a projekt adatbázisát befejeztem, véglegesnek minõsítettem
1.0	2019.12.03	Sass-Gyarmati Norbert	a projektet véglegesítettem


A dokumentumot megkapják

Név			Funkció
Tajti Tibor		Beadanó félév végére
Járomi Dávid Antal	közremûködõ
Oravecz Zsolt		közremûködõ
Sass-Gyarmati Norbert	közremûködõ
Nagy Bálint		közremûködõ
Deák Ádám		közremûködõ



1	Bevezetés

Ebben a fejezetben a tesztterv célja, hatóköre és felépítése található.
1.1	Tesztelési terv hatóköre, célja 

A tesztelési terv célja a tesztelés teljes körûségének biztosítása, a tesztelés során alkalmazott eljárások és megoldások meghatározásával.

A teszt végrehajtásáért a projekt menedzser felel <Sass-Gyarmati Norbert>, és a tesztcsapat hajtja végre a 2.1. fejezetben meghatározott módon.

1.2	Elvárások

 Az alábbi alap elvárások képezik ennek a teszttervnek az alapját:
•	Az olvasó ismeri az alapdokumentumokat, amelyek meghatározzák a rendszert. 
•	Az HotelLite szervezeti projektcsapat felelõs a tesztadatok elõállításáért.  
•	A tesztprogram az ebben a dokumentumban meghatározott tesztterv alapján fut. 

2	Szükséges erõforrások

Ez a fejezet a teszteléshez szükséges erõforrásokat fejti ki. 
2.1	Feladatkörök és felelõsségek (HotelLite tesztcsapat)

Feladatkörök és felelõsségek
Feladatkör	Felelõsség/tevékenység	Személy
Tesztelõ: 	
?	A teszt végrehajtása						Oravecz Zsolt
?	Észrevételek dokumentálása					Sass-Gyarmati Norbert
?	Teszt dokumentáció archiválása					Sass-Gyarmati Norbert
									
Szakértõ:	
A szakértõ az észrevételek elemzi és megoldást javasol.			
Teszt-koordinátor:	
?	Teszt terv készítése						Sass-Gyarmati Norbert
?	A tesztterv jóváhagyatása a projektmenedzserrel			Sass-Gyarmati Norbert
									Oravecz Zsolt
?	Teszt forgatókönyvek létrehozása				Sass-Gyarmati Norbert
?	Inkonzisztenciák kezelése 					Oravecz Zsolt
?	Helyes és idõbeni hibakezelés 					Oravecz Zsolt
?	Szükség esetén problémák eszkalálása a projekt menedzsernek 	Oravecz Zsolt
?	Végsõ riport készítése						Sass-Gyarmati Norbert
?	Teszt dokumentum archiválása					Járomi Dávid Antal
?	Az észrevételek státuszának követése, ill. dokumentálása	Sass-Gyarmati Norbert
									Járomi Dávid Antal
									Oravecz Zsolt

Projektvezetõ:								Sass-Gyarmati Norbert
?	Teszt terv jóváhagyása 
?	Teszt forgatókönyv (testscript)					Sass-Gyarmati Norbert
									Oravecz Zsolt

2.2	Tesztkörnyezet

Ebben a részben meg kell határozni, hogy a tesztelés milyen környezetben történjen (fejlesztõi vagy tesztkörnyezet), a környezetek hogyan érhetõek el, továbbá a tesztelõk milyen hozzáféréssel végezzék a tesztelést.

Tesztkörnyezet
Környezet neve és feladata		A hozzáférés módja		Konfiguráció	
		Kapcsolattartó személyek
fejlesztõi				publikus			projekt módosítás		Sass-Gyarmati Norbert
									Adatbázis módosítás

teszt					publikus			projekt metódusok vizsgálata	Sass-Gyarmati Norbert
													Oravecz Zsolt
													Járomi Dávid Antal
teszt					publikus			tesztterv készítése		Sass-Gyarmati Norbert

2.3	Tesztadatok

A teszt végrehajtásához szükséges rekordok (tesztadatok) száma: xxx
A tesztadatok elkészítéséért és feltöltéséért felelõs személy: xxx

A tesztadatoknak az alábbi követelményeknek kell megfelelniük:
	Az alapadatok értékkészlete az éles rendszerrel megegyezõ kell, hogy legyen.
2.4	Leszállítandó teszt dokumentumok

Az összes teszt dokumentáció és leszállítandó a következõ helyen érhetõ el: Eszterházy Károly Egyetem C épület

…
Cím			Felelõs személy			Szállítási gyakorisága		Szállítás módja
Teszt terv:		Sass-Gyarmati Norbert		nincs				github

Teszt-esetek:		Oravecz Zsolt			nincs				github
Tesztjegyzõkönyvek:	Járomi Dávid Antal
			Sass-Gyarmati Norbert
			Oravecz Zsolt			nincs				nincs
Tesztelési jelentés:	Sass-Gyarmati Norbert		nincs				trello
											github
											személyes


2.5	Tesztelési eszközök

	…hordozható számítógép
	…számítógép(PC)

****************************************************************************************************
3	Tesztelési terv

Ez a fejezet leírja a teszt típusát, a metodológiáját és a riport készítés módszerét. Emellett meghatározza a teszt elvárásokat, a teszt-esetek elvárt eredményeit, sikerességének kritériumait, a kockázatok kezelését és a hatáskörön kívül eseteket.
3.1	Fejlesztõi teszt

A fejlesztõi tesztelés célja a rendszer alapvetõ funkcióinak ellenõrzése, a hibakezelés és az alapvetõ funkciók mûködésének vizsgálata. Módszere:

Teszt kódja		Funkció			Teszter			Dátum		Megjegyzés
000			bejelentkeztetés	Oravecz Zsolt		2019.11.29	a login rész kiválóan mûködik
											hamis adatokkal használhatatlan 
											a szoftver összes funkciója

001			adatbevitel		Sass-Gyarmati Norbert	2019.12.02	Az adatbevitel részben volt sikeres,
											melynek apróbb hibáit sikerült kijavítani

002			adatbázis		Oravecz Zsolt		2019.12.03	Az adatbázis-kezelõ rendszer tesztelése
											sikeres volt, adatokat csak különféle 
											megszorításokkal lehet felvinni

003			adatbevitel		Sass-Gyarmati Norbert	2019.12.04	Az adatbevitel csak egy elõre megadott hálózati
											hozzáféréssel mûködik, ennek következményeképpen
											intézményen belül tudtam a további hibákat javítani

*************************************************************************************************
3.2	Prototípus (modul) teszt

A prototípustesztelés (vagy másik nevén modultesztelés) célja a rendszer már mûködõ moduljainak önálló tesztelése, a modulon belüli hibák azonosításának és kiküszöbölésének érdekében. Módszere:

A prototípusunk unit tesztelésen esett át, melyben fõbb feladatunk volt,
hogy a program kapacitása nagyobb mennyiségnél ne omljon össze, melyet 
metódusok segítségével tudtunk létrehozni.
1.

for (int i = 0; i < 100000; i++)
            {
                comboBox2.Items.Add("szobaszám: " + szoba[i].Szoba + " ágyak száma: " + szoba[i].Agyszam + " felszererltsége: " + szoba[i].Felszereles);
            }

tulajdonságok:
- a rendszer lassabbnak bizonyult, azonban nem omlott össze, sikeres tesztelés.
- a memória hirtelen megnõtt, de ezek az adatok néhány kb plusz adatot tudtak 
szolgáltatni, ezáltal sikeres tesztelés volt.
- a panelen látszólag nem történt semmi negatív változás, sikeres tesztelés.

2.

for (int i = 0; i < 999999999999; i++)
            {
                comboBox1.Items.Add("név: " + vendeglista[i].Nev + " taj száma: " + vendeglista[i].Taj + " lakcíme: " + vendeglista[i].Lakcim + " kivett szoba: " + vendeglista[i].KivettSzoba);
            }

tulajdonságok:
- a rendszer lényegesebben lassabbnak bizonyult, azonban nem omlott össze, 
sikeres tesztelés.
- a memória hirtelen megnõtt, de ezek az adatok néhány kb plusz adatot tudtak 
szolgáltatni, ezáltal sikeres tesztelés volt.
- a panelen negatív változás történt, mely abban nyilvánult meg,
hogy több idõt kellett várni a legördülõ menü lekérdezéséhez, sikertelen tesztelés


	A tesztelések alatt megfigyeltük, hogy a szoftver normálisan fog mûködni, 
reális adatokkal tud dolgozni, valamint irreális adatok során sem omlik össze a 
rendszer.
	Megfigyeltük tobábbá, hogy a memória igénye dinamikusan fejlõdik,
ezáltal a teljes szoftver memória igénye körülbelül kevesebb lesz, mint 200MB.
	
tesztelve:
- Windows PC
- Windows notebook
**********************************************************************************************

3.3	Integrációs teszt

Az integrációs teszt célja a rendszer más rendszerekhez történõ illesztésének vizsgálata, a több rendszereken keresztül átívelõ
funkciók tesztelésének érdekében. Az adatmigrációs tesztelés az integrációs teszteléshez tartozik, ennek lényege, hogy a
bevezetendõ rendszerbe áttöltik azokat az adatokat, amelyekkel a rendszer dolgozni fog és letesztelik a betöltött adatok, illetve
az adatokat kezelõ funkciók helyességét. Módszere:

	A szoftverünk a megbízó igényeit kielégítve nem multiplatformos programozási nyelven készült, ennek
hatására más operációs rendszerrel rendelkezõ személyi-illetve hordozható számítógépeken nem mûködik.
Szoftverünk csak a Windows operációs rendszerrel rendelkezõ készülékeken fut.
	Windows alapú számítógépeken megfelelõen és a megrendelõ igényeihez mérten mûködik.

**************************************************************************************************

3.4	Elfogadási teszt

Az elfogadási teszt (angolul User Acceptance Test) célja a rendszer teljes funkcionalitásának vizsgálata a felhasználók szemszögébõl. Módszere:

	Béta verzió megnevezése		kód		felhasználó		funkció			megjegyzés
	HotelLite Beta			001		Kiss Pista		login			regisztrálni egy fiókkal tudtam, melyet a csoport generált

					002		Nagy Pista		adatfeltöltés		adatokat csak bejelentkezés után tudtam lekérni, illetve 
													feltölteni
	
					003		Géza			adatbiztonság		Az adatokat csak akkor lehet kinyerni, ha arra jogosult
													felhasználó teszi. A védet adatok egy hash függvény alatt
													van kódolva, ezáltal nem lehet az eredetire visszafejteni.

					005		Gizi			adatlekérés		Az adatokat dinamikusan és gyorsan lehet feltölteni, majd
													azokat lekérni.

					006		Béla			adatfeltöltés		A szoftver jelzi, ha helytelen adatot szeretne a kliens	
													feltölteni, így nem áll le a program, hanem helytelen adatok
													után is tovább tud futni.

******************************************************************************************************************************************************************
3.5	Terheléses teszt 
A terheléses teszt célja a tervezett kapacitások, valamint a rendelkezésre álló növekedési potenciál meghatározása. Módszere:

	kód		teszter				mellék		megjegyzés

	001		Sass-Gyarmati Norbert		01		A terheléses teszt sikeres volt, a feltételeknek eleget tett

	002		Sass-Gyarmati Norbert		02		A terheléses teszt látszólag közepesen sikeres, a teljesítmény alacsonyabb lett,
									a tárigény dinamikusan emelkedett, valamint az idõ megnõtt.

	003		Oravecz Zsolt			03		A bejelentkeztetést 100 adattal próbáltam feltörni, mely sikertelen eredményt
									hozott, ennek hatására a terheléses teszt sikeres lett.

	004 		Sass-Gyarmati Norbert				A szoftver ezen terheléses teszt célja az volt, hogy összesen egy 1GB-os lemez
									területen összesen mennyi adat fér el. Eredménye a következõ: A szolgáltatás tárhelye
									(kb. 150MB) körülbelül 100 000, azaz százezer adatot tudunk bevinni akadás és fagyás
									mentesen.

	005		Sass-Gyarmati Norbert				A szofter minden terheléses igénynek megfelelt, a szolgáltatás a megbízó igényeit
									kielégítve elkészült.



mellék:
	-01:
	for (int i = 0; i < 100000; i++)
            {
                comboBox1.Items.Add("név: " + vendeglista[i].Nev + " taj száma: " + vendeglista[i].Taj + " lakcíme: " + vendeglista[i].Lakcim + " kivett szoba: " + vendeglista[i].KivettSzoba);
            }

	-02:
	for (int i = 0; i < 99999999999; i++)
            {
                comboBox1.Items.Add("név: " + vendeglista[i].Nev + " taj száma: " + vendeglista[i].Taj + " lakcíme: " + vendeglista[i].Lakcim + " kivett szoba: " + vendeglista[i].KivettSzoba);
            }

***********************************************************************************************************************************************************
3.6	Biztonsági teszt (audit)

Biztonsági tesztelésre akkor van szükség, ha a rendszer szenzitív (pl. személyes vagy pénzügyi) adatokat kezel, vagy szabadon elérhetõ az internetrõl. Módszere:



	Béta verzió megnevezése		kód		felhasználó			funkció			megjegyzés

	HotelLite Beta			001		Oravezc Zsolt			adatbiztonság		regisztrálni egy fiókkal lehet, melyet a csoport generál

					002		Sass-Gyarmati Norbert		adatfeltöltés		adatokat csak bejelentkezés után tudtam lekérni, illetve 
														feltölteni
	
					003		Sass-Gyarmati Norbert		adatbiztonság		Az adatokat csak akkor lehet kinyerni, ha arra jogosult
														felhasználó teszi. A védet adatok egy hash függvény alatt
														van kódolva, ezáltal nem lehet az eredetire visszafejteni.

					005		Oravezc Zsolt			adatlekérés		Az adatokat csak arra jogosult kliens kérhet le, adatbázis
														szervert csak a szoftverkliens által lehet elérni

					006		Sass-Gyarmati Norbert		adatfeltöltés		A szoftver jelzi, ha helytelen adatot szeretne a kliens	
														feltölteni, így nem áll le a program, hanem helytelen adatok
														után is tovább tud futni.

					007		Oravezc Zsolt			adatbiztonság		Az adatok értékei hash függvény miatt nem olvasható,
														ezáltal nem lehet visszafejteni.


**********************************************************************************************************************************************************
3.8	Tesztelési feladatok, teszt-esetek leírása

A tesztelési feladat a következõ teszt-eseteket foglalja magában:
?	…A tesztek sikeresek voltak
?	Hibát nem észleltünk, minden teszt elvárásainknak eleget tett
?	…Funkciók szempontjából hibák nem jelentkeztek



3.9	Tesztelési ütemterv, függõségek – tesztforgatókönyv

A teszt elvégzésének meghatározott sorrendjét és függõségeit tesztforgatókönyvben kell rögzíteni. A tesztforgatókönyv elkészítése a tesztelések koordinálásért
felelõs szakértõ feladata, elkészítése során törekedni kell a párhuzamos elvégezhetõ tevékenységek lehetõség szerinti kihasználására, a tesztelési idõigény
csökkentésének érdekében. A tesztforgatókönyvben rögzíteni szükséges továbbá a tesztelés sorrendjét és a tesztelés logikáját (funkciók vagy folyamatok alapján) is.


4	Tesztelési jegyzõkönyv és tesztelési jelentés


4.1	Tesztelési jegyzõkönyv

A tesztelõk a tesztforgatókönyvnek megfelelõen elvégzik a tesztelést és az eredményt tesztjegyzõkönyvekben dokumentálják. A teszt kimenetelést
minden esetben jelenteni kell a tesztkoordinátornak. A tesztkoordinátor a szakértõkkel együtt megoldást keres a problémákra, majd frissíti a
tesztforgatókönyvet. Ha a problémát megoldották, a tesztelõ újrakezdheti a tesztelést, majd dokumentálja az eredményeket. Ha a hiba továbbra
is fennáll, és harmadik félen múlik a megoldása eszkalálni kell a problémát a projekt menedzsernek. 
************************************************************************************************************************************************************
				Prototípus	

	A prototípusunk unit tesztelésen esett át, melyben fõbb feladatunk volt,
hogy a program kapacitása nagyobb mennyiségnél ne omljon össze, melyet 
metódusok segítségével tudtunk létrehozni.
1.

for (int i = 0; i < 100000; i++)
            {
                comboBox2.Items.Add("szobaszám: " + szoba[i].Szoba + " ágyak száma: " + szoba[i].Agyszam + " felszererltsége: " + szoba[i].Felszereles);
            }

tulajdonságok:
- a rendszer lassabbnak bizonyult, azonban nem omlott össze, sikeres tesztelés.
- a memória hirtelen megnõtt, de ezek az adatok néhány kb plusz adatot tudtak 
szolgáltatni, ezáltal sikeres tesztelés volt.
- a panelen látszólag nem történt semmi negatív változás, sikeres tesztelés.

2.

for (int i = 0; i < 999999999999999999; i++)
            {
                comboBox1.Items.Add("név: " + vendeglista[i].Nev + " taj száma: " + vendeglista[i].Taj + " lakcíme: " + vendeglista[i].Lakcim + " kivett szoba: " + vendeglista[i].KivettSzoba);
            }

tulajdonságok:
- a rendszer lényegesebben lassabbnak bizonyult, azonban nem omlott össze, 
sikeres tesztelés.
- a memória hirtelen megnõtt, de ezek az adatok néhány kb plusz adatot tudtak 
szolgáltatni, ezáltal sikeres tesztelés volt.
- a panelen negatív változás történt, mely abban nyilvánult meg,
hogy több idõt kellett várni a legördülõ menü lekérdezéséhez, sikertelen tesztelés


	A tesztelések alatt megfigyeltük, hogy a szoftver normálisan fog mûködni, 
reális adatokkal tud dolgozni, valamint irreális adatok során sem omlik össze a 
rendszer.
	Megfigyeltük tobábbá, hogy a memória igénye dinamikusan fejlõdik,
ezáltal a teljes szoftver memória igénye körülbelül kevesebb lesz, mint 200MB.
	
tesztelve:
- Windows PC
- Windows notebook


				Nagy projekt

	Projektünk kifejezetten ügyel és figyel a biztonsági intézkedésekre, melyet a megbízó
igényeihez formáltunk. Kódunk kimenõ paramétereit, ide beleértve a jelszavak, személyes 
adatok, hashelve lett.
Példa: 
	entry.LoginName == textBox_loginname.Text && entry.Passwd == Convert.ToString(textBox_passwd.Text.GetHashCode()


Ennek hatására nem lehet személyes adatokat kinyerni a hackerek számára.
------------------------------------------------------------------------------------------------
A HotelLite programot teszt alá vetettük.
Fõbb tesztelési területek:
	1. teljesítmény
	2. elvárt mûködés

1.) A szoftvert teljesítmény használatot tekintve kiegyensúlyozottan mûködik. Nem terheli a számítógépet.
Ez annak is köszönhetõ hogy a loginoltató alkalmazás hátterében nem áll túl kombinált kód. Egyszerûbb összehasonlítsokat végez,
illetve megfelelõ üzenettel, esetenként hibaüzenettel tájékoztatja a felhasználót a mûveletek eredményességérõl. 

Egyedi hibák megnevezése:
	-tinException: az adó azonosító csak számokat tartalmazhat
	-identityException: 11 hosszú lehet a személyi azonosító
	-nationalityException: túl hosszú a mezõ értéke
	-bedsException: 10-nél több ágy nem lehet egy szobában
	-priceLessException: nem lehet mínusz értékû a szoba

Megfigyeltük tobábbá, hogy a memória igénye dinamikusan fejlõdik,
ezáltal a teljes szoftver memória igénye körülbelül kevesebb lesz, mint 200MB.
	
tesztelve:
- Windows PC
- Windows notebook

2.) A szoftver teszteltük mind megfelelõ, mind fals bejelentkezési információkkal. Mind két információ típusnak helyt állt és
megfelelõen mûködött. Abban az esetben ha a regisztráció sikeres volt, akkor a meglfelelõ adatokkal a felhasználó be tudott lépni,
és a loginoló alkalmazás meghívta a fõalkalmazást. A következõ esetekben a szoftver hiba üzenetet dobott:
	-Ha a termékkulcs hibás volt
	-Ha hiányzott a termékkulcs, felhasználói név, jelszó hármas valamelyike. 
	-Ha a regisztráció sikeresnek bizonyult, azonban a felhasználói név-jelszó páros nem egyezett 


Jellemzõk:
- operációs rendszer: windows
- programozási nyelv: c# - winform application
- adatok szerkezete: statikus
- adatbázis: nincs
- RAM: <100MB
- tesztelt eszközök: PC, notebook

Fõbb funkciói:
- vendégek felvétele a jegyzékbe
- vendégek datainak listázása
- szobák és azok funkcióinak listázása
- vendégek által lefoglalt szobák listázása
------------------------------------------------------------------------------------------------
				HotelLite Unit tesztelés

1. Bevezetés-védelem:

Projektünk kifejezetten ügyel és figyel a biztonsági intézkedésekre, melyet a megbízó
igényeihez formáltunk. Kódunk kimenõ paramétereit, ide beleértve a jelszavak, személyes 
adatok, hashelve lett.
Példa: 
	entry.LoginName == textBox_loginname.Text && entry.Passwd == Convert.ToString(textBox_passwd.Text.GetHashCode()


Ennek hatására nem lehet személyes adatokat kinyerni a hackerek számára.

2. Unit Teszt:
	
	Unit tesztelés során nagy hangsújt fektettünk bele, hogy kapacitás szempontjából 
mennyi vendéget tud kezelni a rendszer.
	Két elhatározásra jutottunk:
	1.adatbázis(SQLDeveloper):
	-Az adatbázis egyszerre összesen 30 MB-i adattal tud dolgozni, amibõl körülbelül
20 MB az optimális. Összesen 1000, azaz ezer beégetett vendég adatokkal teszteltük a 
szolgáltatásunkat. 
eredmény:	1000 vendég adattal nagyobb memória fogy, azonban könnyen és gyorsan ellehet 
érni adatokat, optimálisan fut.
	-Másodjára 10000, azaz tízezer vendég adattal dolgoztunk és teszteltük. 
Az eredmény:	10000 vendég adattal jóval nagyobb memória fogy, nehezebben, de gyorsan ellehet 
érni adatokat, alacsonyabban fut.

	2.fájlkezelés(txt fájl):
	-A fájlkezelés egyszerre összesen véges sok adattal tud dolgozni, amibõl körülbelül
20 MB az optimális. Összesen 1000, azaz ezer beégetett vendég adatokkal teszteltük a 
szolgáltatásunkat. 
eredmény:	1000 vendég adattal nagyobb memória fogy, nehezen és lassabban ellehet 
érni adatokat, közepes idõintervallummal fut.
	-Másodjára 10000, azaz tízezer vendég adattal dolgoztunk és teszteltük. 
Az eredmény:	10000 vendég adattal a memória csaknem fele elfogy, nehezebben, 
és nagyon lassan ellehet érni adatokat, lassan fut.
	


***********************************************************************************************************************************************************


4.2	Tesztelési jelentés

A tesztelési jelentést a tesztkoordinátor készíti el. Ez egy részletes áttekintése a lefutott teszteknek, azok eredményeinek, státuszának és a megjegyzéseknek.
A tesztkoordinátor juttatja el a projektmenedzsernek a tesztelési jelentést. 

Tesztelési jelentés*
A teszt-eset leírás és célja:			Projekt tesztelése a prototípusnál leírt tesztek által
A tesztelt folyamat/funkció leírása:		A folyamat gyors, funkciója szempontjából a terhelést tesztelem, valamint a terhelés által kialakuló különbségeket
A tesztelés elõfeltételei:			prototípus által elõírt teszt kódok
A tesztelés dátuma és idõpontja:		2019.11.29
A tesztadatok típusa:				visual studio által támogatott c# metódus
A tesztet végzõ személy(ek):			Sass-Gyarmati Norbert
A tesztelt rendszer beállításai:		1000 vendég adattal dolgozó metódus
A teszt-eset elvárt eredménye:			elvárt eredmény a dinamikus növekedés, valamint idõ és tárhely megmaradása
A tesztelés eredménye:	?			Megfelelt - IGEN
?						Nem felelt meg
?						Megfelelt megjegyzésekkel
Megjegyzések:					idõ szempontjából lényegtelen különbség, tárigény szempontjából viszont dinamikusan emelkedett



Tesztelési jelentés*
A hivatkozott tesztjegyzõkönyvek rövid leírása és eredménye:				tesztjegyzõkönyv 1 újra tesztelése, eredmények újra kérése
A tesztelt folyamatok/funkciók/modulok leírása:						A folyamat gyors, funkciója szempontjából a terhelést tesztelem,
											valamint a terhelés által kialakuló különbségeket

A tesztadatok típusa:									visual studio által támogatott c# metódus
											script nyelvek

A tesztelt rendszer beállításai:							1000 vendég adattal dolgozó metódus

A tesztelések eredménye:								Megfelelt/élesíthetõ - IGEN
											Nem felelt meg
											Megfelelt megjegyzésekkel
Megjegyzések:										idõ szempontjából lényegtelen különbség, tárigény szempontjából viszont
											dinamikusan emelkedett

Tesztelést elvégezte
Név:											Oravecz Zsolt
Szervezeti egység/ beosztás:								vezetõ programozó
Aláírás:										Oravecz Zsolt
Dátum:											2019.12.05


Jóváhagyások
Jóváhagyó
Név:											Sass-Gyarmati Norbert
Szervezeti egység/ beosztás:								vezetõ programozó
Aláírás:										Sass-Gyarmati Norbert
Dátum:											2019.12.06





Tesztelési jelentés*
A hivatkozott tesztjegyzõkönyvek rövid leírása és eredménye:				tesztjegyzõkönyv 1 újra tesztelése, eredmények újra kérése
A tesztelt folyamatok/funkciók/modulok leírása:						A folyamat gyors, funkciója szempontjából a terhelést tesztelem,
											valamint a terhelés által kialakuló különbségeket

A tesztadatok típusa:									visual studio által támogatott c# metódus
											script nyelvek

A tesztelt rendszer beállításai:							adatvédelmi beállítások

A tesztelések eredménye:								Megfelelt/élesíthetõ - IGEN
											Nem felelt meg
											Megfelelt megjegyzésekkel
Megjegyzések:										a rendszer biztonságilag is megfelelõen mûködik

Tesztelést elvégezte
Név:											Sass-Gyarmati Norbert
Szervezeti egység/ beosztás:								vezetõ programozó
Aláírás:										Sass-Gyarmati Norbert
Dátum:											2019.12.06


Jóváhagyások
Jóváhagyó
Név:											Oravecz Zsolt
Szervezeti egység/ beosztás:								vezetõ programozó
Aláírás:										Oravecz Zsolt
Dátum:											2019.12.07



***********************************************************************************************************************************************************
4.3	Tesztelt elvárások 

Az alábbi funkcionális elvárások szerepelnek az üzleti illetve fejlesztõi specifikációban, amelyek tesztelésre is kerültek: 

#	Leírás
1.	védelmi intézkedések
2.	Megbízhatóság
3.	Skálázhatóság
4.	A tranzakciók integritása
5.	Biztonság és teljesítmény
6.	Helyreállítás
	
	

Az alábbi nem-funkcionális elvárások szerepelnek az üzleti illetve fejlesztõi specifikációban, amelyek tesztelésre is kerültek: 

#	Leírás
1.	Szakértelmi megszorítások
2.	A mûködési környezet
3.	
4.	

Az alábbi elvárások szerepelnek az üzleti illetve fejlesztõi specifikációban, amelyek nem kerültek tesztelésre: 

#	Leírás
1.	beégetett adatok
2.	szoftverfrissítési lehetõségek
3.	
4.	


**********************************************************************************************************************************************************

4.4	Elfogadási kritériumok

A teszt sikerességének kritériumai:
?	Technikai, a teszt forgatókönyvben leírtak szerint. 
?	A projekt menedzser jóváhagyása a teszt leszállítandókra. 
4.5	Kockázat kezelés

#	Kockázat				Hatás(magas/közepes/alacsony)								A kockázat kezelésének módja
1.	dinamikus adat bõvülés				magas										feltöltött 1000 adat gyors és biztonságos elérésû volt

2.	hibás adatokkal való regisztrálás		magas										a szoftver minden hibát képes lekezelni,
																	ami a program futása során keletkezhet

3.	szoftver terhelés				közepes										a szoftver lassabban mûködik 30MB-nál több adattal


******************************************************************************************************************************************************************************************

5	Tesztjegyzõkönyv 1 
Tesztelési jegyzõkönyv*
A teszt-eset leírás és célja:			Projekt tesztelése a prototípusnál leírt tesztek által
A tesztelt folyamat/funkció leírása:		A folyamat gyors, funkciója szempontjából a terhelést tesztelem, valamint a terhelés által kialakuló különbségeket
A tesztelés elõfeltételei:			prototípus által elõírt teszt kódok
A tesztelés dátuma és idõpontja:		2019.11.29
A tesztadatok típusa:				visual studio által támogatott c# metódus
A tesztet végzõ személy(ek):			Sass-Gyarmati Norbert
A tesztelt rendszer beállításai:		1000 vendég adattal dolgozó metódus
A teszt-eset elvárt eredménye:			elvárt eredmény a dinamikus növekedés, valamint idõ és tárhely megmaradása
A tesztelés eredménye:	?			Megfelelt - IGEN
?						Nem felelt meg
?						Megfelelt megjegyzésekkel
Megjegyzések:					idõ szempontjából lényegtelen különbség, tárigény szempontjából viszont dinamikusan emelkedett



Tesztelést elvégezte
Név:				Sass-Gyarmati Norbert
Szervezeti egység/ beosztás:	vezetõ programozó/közremûködõ
Aláírás:
				Sass-Gyarmati Norbert
				Esztreházy Károly Egyetem	
Dátum:				2019.12.03

Jóváhagyások
Jóváhagyó
Név:				Oravecz Zsolt
Szervezeti egység/ beosztás:	vezetõ programozó/közremûködõ
Aláírás:			Oravecz Zsolt
Dátum:				2019.12.04










6	Tesztelési jelentés 1 
Tesztelési jelentés*
A hivatkozott tesztjegyzõkönyvek rövid leírása és eredménye:				tesztjegyzõkönyv 1 újra tesztelése, eredmények újra kérése
A tesztelt folyamatok/funkciók/modulok leírása:						A folyamat gyors, funkciója szempontjából a terhelést tesztelem,
											valamint a terhelés által kialakuló különbségeket

A tesztadatok típusa:									visual studio által támogatott c# metódus
											script nyelvek

A tesztelt rendszer beállításai:							1000 vendég adattal dolgozó metódus

A tesztelések eredménye:								Megfelelt/élesíthetõ - IGEN
											Nem felelt meg
											Megfelelt megjegyzésekkel
Megjegyzések:										idõ szempontjából lényegtelen különbség, tárigény szempontjából viszont
											dinamikusan emelkedett

Tesztelést elvégezte
Név:											Oravecz Zsolt
Szervezeti egység/ beosztás:								vezetõ programozó
Aláírás:										Oravecz Zsolt
Dátum:											2019.12.05


Jóváhagyások
Jóváhagyó
Név:											Sass-Gyarmati Norbert
Szervezeti egység/ beosztás:								vezetõ programozó
Aláírás:										Sass-Gyarmati Norbert
Dátum:											2019.12.06


