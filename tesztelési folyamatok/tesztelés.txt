			Prototípus	

	A prototípusunk unit tesztelésen esett át, melyben fõbb feladatunk volt,
hogy a program kapacitása nagyobb mennyiségnél ne omljon össze, melyet 
metódusok segítségével tudtunk létrehozni.
1.

for (int i = 0; i < 100000; i++)
            {
                comboBox2.Items.Add("szobaszám: " + szoba[i].Szoba + " ágyak száma: " + szoba[i].Agyszam + " felszererltsége: " + szoba[i].Felszereles);
            }

tulajdonságok:
- a rendszer lassabbnak bizonyult, azonban nem omlott össze, sikeres tesztelés.
- a memória hirtelen megnõtt, de ezek az adatok néhány kb plusz adatot tudtak 
szolgáltatni, ezáltal sikeres tesztelés volt.
- a panelen látszólag nem történt semmi negatív változás, sikeres tesztelés.

2.

for (int i = 0; i < 999999999999999999; i++)
            {
                comboBox1.Items.Add("név: " + vendeglista[i].Nev + " taj száma: " + vendeglista[i].Taj + " lakcíme: " + vendeglista[i].Lakcim + " kivett szoba: " + vendeglista[i].KivettSzoba);
            }

tulajdonságok:
- a rendszer lényegesebben lassabbnak bizonyult, azonban nem omlott össze, 
sikeres tesztelés.
- a memória hirtelen megnõtt, de ezek az adatok néhány kb plusz adatot tudtak 
szolgáltatni, ezáltal sikeres tesztelés volt.
- a panelen negatív változás történt, mely abban nyilvánult meg,
hogy több idõt kellett várni a legördülõ menü lekérdezéséhez, sikertelen tesztelés


	A tesztelések alatt megfigyeltük, hogy a szoftver normálisan fog mûködni, 
reális adatokkal tud dolgozni, valamint irreális adatok során sem omlik össze a 
rendszer.
	Megfigyeltük tobábbá, hogy a memória igénye dinamikusan fejlõdik,
ezáltal a teljes szoftver memória igénye körülbelül kevesebb lesz, mint 200MB.
	
tesztelve:
- Windows PC
- Windows notebook


				Nagy projekt

	Projektünk kifejezetten ügyel és figyel a biztonsági intézkedésekre, melyet a megbízó
igényeihez formáltunk. Kódunk kimenõ paramétereit, ide beleértve a jelszavak, személyes 
adatok, hashelve lett.
Példa: 
	entry.LoginName == textBox_loginname.Text && entry.Passwd == Convert.ToString(textBox_passwd.Text.GetHashCode()


Ennek hatására nem lehet személyes adatokat kinyerni a hackerek számára.
------------------------------------------------------------------------------------------------
A HotelLite programot teszt alá vetettük.
Fõbb tesztelési területek:
	1. teljesítmény
	2. elvárt mûködés

1.) A szoftvert teljesítmény használatot tekintve kiegyensúlyozottan mûködik. Nem terheli a számítógépet.
Ez annak is köszönhetõ hogy a loginoltató alkalmazás hátterében nem áll túl kombinált kód. Egyszerûbb összehasonlítsokat végez,
illetve megfelelõ üzenettel, esetenként hibaüzenettel tájékoztatja a felhasználót a mûveletek eredményességérõl. 

Egyedi hibák megnevezése:
	-tinException: az adó azonosító csak számokat tartalmazhat
	-identityException: 11 hosszú lehet a személyi azonosító
	-nationalityException: túl hosszú a mezõ értéke
	-bedsException: 10-nél több ágy nem lehet egy szobában
	-priceLessException: nem lehet mínusz értékû a szoba

Megfigyeltük tobábbá, hogy a memória igénye dinamikusan fejlõdik,
ezáltal a teljes szoftver memória igénye körülbelül kevesebb lesz, mint 200MB.
	
tesztelve:
- Windows PC
- Windows notebook

2.) A szoftver teszteltük mind megfelelõ, mind fals bejelentkezési információkkal. Mind két információ típusnak helyt állt és
megfelelõen mûködött. Abban az esetben ha a regisztráció sikeres volt, akkor a meglfelelõ adatokkal a felhasználó be tudott lépni,
és a loginoló alkalmazás meghívta a fõalkalmazást. A következõ esetekben a szoftver hiba üzenetet dobott:
	-Ha a termékkulcs hibás volt
	-Ha hiányzott a termékkulcs, felhasználói név, jelszó hármas valamelyike. 
	-Ha a regisztráció sikeresnek bizonyult, azonban a felhasználói név-jelszó páros nem egyezett 


Jellemzõk:
- operációs rendszer: windows
- programozási nyelv: c# - winform application
- adatok szerkezete: statikus
- adatbázis: nincs
- RAM: <100MB
- tesztelt eszközök: PC, notebook

Fõbb funkciói:
- vendégek felvétele a jegyzékbe
- vendégek datainak listázása
- szobák és azok funkcióinak listázása
- vendégek által lefoglalt szobák listázása
------------------------------------------------------------------------------------------------
				HotelLite Unit tesztelés

1. Bevezetés-védelem:

Projektünk kifejezetten ügyel és figyel a biztonsági intézkedésekre, melyet a megbízó
igényeihez formáltunk. Kódunk kimenõ paramétereit, ide beleértve a jelszavak, személyes 
adatok, hashelve lett.
Példa: 
	entry.LoginName == textBox_loginname.Text && entry.Passwd == Convert.ToString(textBox_passwd.Text.GetHashCode()


Ennek hatására nem lehet személyes adatokat kinyerni a hackerek számára.

2. Unit Teszt:
	
	Unit tesztelés során nagy hangsújt fektettünk bele, hogy kapacitás szempontjából 
mennyi vendéget tud kezelni a rendszer.
	Két elhatározásra jutottunk:
	1.adatbázis(SQLDeveloper):
	-Az adatbázis egyszerre összesen 30 MB-i adattal tud dolgozni, amibõl körülbelül
20 MB az optimális. Összesen 1000, azaz ezer beégetett vendég adatokkal teszteltük a 
szolgáltatásunkat. 
eredmény:	1000 vendég adattal nagyobb memória fogy, azonban könnyen és gyorsan ellehet 
érni adatokat, optimálisan fut.
	-Másodjára 10000, azaz tízezer vendég adattal dolgoztunk és teszteltük. 
Az eredmény:	10000 vendég adattal jóval nagyobb memória fogy, nehezebben, de gyorsan ellehet 
érni adatokat, alacsonyabban fut.

	2.fájlkezelés(txt fájl):
	-A fájlkezelés egyszerre összesen véges sok adattal tud dolgozni, amibõl körülbelül
20 MB az optimális. Összesen 1000, azaz ezer beégetett vendég adatokkal teszteltük a 
szolgáltatásunkat. 
eredmény:	1000 vendég adattal nagyobb memória fogy, nehezen és lassabban ellehet 
érni adatokat, közepes idõintervallummal fut.
	-Másodjára 10000, azaz tízezer vendég adattal dolgoztunk és teszteltük. 
Az eredmény:	10000 vendég adattal a memória csaknem fele elfogy, nehezebben, 
és nagyon lassan ellehet érni adatokat, lassan fut.
	


